import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import { Button, MainButton } from "../button";
import './rotate.scss'

const OnBoardingSlider = ({ schema }) => {
  const [number, setNumber] = useState(0);
  const handlePrevSlide = () => {
    if (number != 0) {
      setNumber((pre) => pre - 1);
    }
  };

  const handleNextSlide = () => {
    if (number !== 8) {
      setNumber((pre) => pre + 1);
    } else {
      setNumber(0);
    }
  };
  const sliders = schema?.sliderContent;

  // slider effect
  const [slideOffsets, setSlideOffsets] = useState([]);
  const slideRefs = useRef([]);
  const getScrollLeftOffset = (index) => {
    if (slideRefs.current[index]) {
      const offsetLeft = slideRefs.current[index].offsetLeft;
      return offsetLeft;
    }
    return 0;
  };
  useEffect(() => {
    const offsets = [];
    for (let i = 0; i < slideRefs.current.length; i++) {
      const offset = getScrollLeftOffset(i);
      offsets.push(offset);
    }
    setSlideOffsets(offsets);
  }, []);


  // change text effect

  useEffect(() =>{
        const parent = document.querySelector('.rotateItemsParent');
        const textRotatorItems = document.querySelectorAll('.rotateItem');
        const activeItemWidth = document.querySelector('.rotateItem.is-active');

         // add width 
         parent.style.width = activeItemWidth.offsetWidth + 'px';

        function toggleClasses() {
           
            const activeItem = document.querySelector('.rotateItem.is-active');
            
            
            if (activeItem) {
                const previousItem = document.querySelector('.rotateItem.was-active');
                
                if(previousItem) {
                    previousItem.classList.remove('was-active');
                }
                // Remove is-active class from the current item
                activeItem.classList.remove('is-active');
                // Add was-active class to the current item
                activeItem.classList.add('was-active');
            }


            const textRotatorItems = document.querySelectorAll('.rotateItem');
            const activeIndex = Array.from(textRotatorItems).indexOf(activeItem);
            const nextIndex = (activeIndex + 1) % textRotatorItems.length;
            // Add is-active class to the next item
            textRotatorItems[nextIndex].classList.add('is-active');
            parent.style.width = textRotatorItems[nextIndex].offsetWidth + 'px';

        }
        const interval = setInterval(toggleClasses, 5000);
        
        return () => clearInterval(interval);
  }, [])

  return (
    <div className="solutionHome gapY">
      <div className="container overCtn">
      <div className="absoluteContent">
          <h2>{schema?.heading}</h2>
          {/* <p>{schema?.title}</p> */}
          
          <div className="rotataingFlex">
            <h3 class="rotateItemsParent">
                <span class="rotateItem is-active">Onboarding</span>
                <span class="rotateItem">Job Transition</span>
                <span class="rotateItem">Hiring</span>
            </h3>
            {/* <h2>All from One Place</h2> */}
          </div>
        </div>

        <div className="sliderParentRow">
          {sliders?.map((slide,i)=>{
            return (
              <div className={`row  slider_prev ${number==i && 'slider_current'}`}  key={i} 
              ref={(el) => (slideRefs.current[i] = el)}
              style={{ transform: `translate3d(-${slideOffsets[i]}px, 0, 0)` }}>
                <div className="col-md-6 col-12 d-flex justify-content-center align-items-center ">
                  <div>
                    <div className="ctnLeftSoll">
                      <h3>{slide?.heading}</h3>
                      <p>{slide?.content}</p>
                      <div className="actionOnboard">
                        <Button text={slide?.buttonName} className="btn-primary" />
                        <Button
                          text={slide?.secondButtonName}
                          className="btn-primary"
                        />
                      </div>
                    </div>
                  </div>
                </div>
                <div className="col-md-6 col-12">
                  <div className="portfoliImageRight">
                    <Image src={slide?.img} alt="Logo" width={400} height={400} />
                  </div>
                </div>
              </div>
            )
          })}
        </div>
        <div className="sliderbtmArrow">
          <Image
            src="/assets/solution/single-sign-on-solution/backwardArrow.svg"
            alt=""
            width={50}
            height={50}
            onClick={handlePrevSlide}
          />
          <Image
            src="/assets/solution/single-sign-on-solution/forwardArrow.svg"
            alt=""
            width={50}
            height={50}
            onClick={handleNextSlide}
          />
        </div>

      </div>
      <div className="solutionHomeLayer">
        <Image
          src="/assets/static/layerbtom.svg"
          alt=""
          width={1920}
          height={814}
        />
      </div>
    </div>
  );
};

export default OnBoardingSlider;


// css



// rotate

.rotataingFlex{
  display: flex;
  gap: 5px;
  h2{
    font-size: 60px;
    font-weight: 700;
    line-height: 69px;
    font-family: "DM Sans", sans-serif;
  }
}
.rotateItemsParent{
  perspective: 800px;
  transition: all 0.65s cubic-bezier(0.23, 1, 0.320, 1);
  display: inline-grid;
  white-space: nowrap;
  margin: 0;
  .rotateItem{
    opacity: 0;
    background: linear-gradient(90deg, #FFA800 0%, #20B8E8 100%);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    text-fill-color: transparent;
    grid-area: 1 / 1;
    width: fit-content;
    display: flex;
    position: relative;
    font-size: 60px;
    font-weight: 700;
    line-height: 69px;
    &.was-active {
      animation: text-rotate-leave 0.65s cubic-bezier(0.23, 1, 0.320, 1) forwards;
    }
    &.is-active {
      z-index: 2;
      animation: text-rotate-enter 0.65s cubic-bezier(0.23, 1, 0.320, 1) forwards;
    }
  }
}


@keyframes text-rotate-enter {
  0% {
      transform: translate3d(-30px, 0, 0) scale(1.2, 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0deg, 0deg);
      opacity: 0;
      filter: blur(10px)
  }

  to {
      transform: translate3d(0, 0, 0) scale(1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);
      opacity: 1;
      filter: blur(0)
  }
}

@keyframes text-rotate-leave {
  0% {
      transform: translate3d(0, 0, 0) scale(1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);
      opacity: 1;
      filter: blur(0)
  }

  to {
      transform: translate3d(30px, 0, 0) scale(1.2 , 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0, 0);
      opacity: 0;
      filter: blur(10px)
  }
}
